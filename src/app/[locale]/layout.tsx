import type { Metadata } from "next";
import { Geist, Geist_Mono, Metrophobic } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "./components/theme-provider";
import { NextIntlClientProvider } from "next-intl";
import { notFound } from "next/navigation";

// Импортируем все переводы явно
import ru from "../../../messages/ru.json"
import en from "../../../messages/en.json"
import pl from "../../../messages/pl.json"
import ukr from "../../../messages/ukr.json"

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const metrophobic = Metrophobic({
  variable: "--font-metrophobic",
  subsets: ["latin"],
  weight: ["400"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Сохраняем все переводы в одном объекте
const allMessages = {
  en,
  ru,
  pl,
  ukr
};

export default async function LocaleLayout({
  children,
  params
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await params;

  // Проверка на доступность локали
  if (!allMessages[locale as keyof typeof allMessages]) {
    notFound();
  }

  const messages = allMessages[locale as keyof typeof allMessages];

  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable} ${metrophobic.variable}`}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <NextIntlClientProvider locale={locale} messages={messages}>
            {children}
          </NextIntlClientProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
